# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mp_pose/pose.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mp_pose.msg

class pose(genpy.Message):
  _md5sum = "42088b21d60401ab7b2e8c479a8fd9b2"
  _type = "mp_pose/pose"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """landmark[] local_landmarks
landmark[] world_landmarks
================================================================================
MSG: mp_pose/landmark
float32 x
float32 y
float32 z 
float32 visibility
float32 presence
# int32 keypoint"""
  __slots__ = ['local_landmarks','world_landmarks']
  _slot_types = ['mp_pose/landmark[]','mp_pose/landmark[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       local_landmarks,world_landmarks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(pose, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.local_landmarks is None:
        self.local_landmarks = []
      if self.world_landmarks is None:
        self.world_landmarks = []
    else:
      self.local_landmarks = []
      self.world_landmarks = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.local_landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.local_landmarks:
        _x = val1
        buff.write(_get_struct_5f().pack(_x.x, _x.y, _x.z, _x.visibility, _x.presence))
      length = len(self.world_landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.world_landmarks:
        _x = val1
        buff.write(_get_struct_5f().pack(_x.x, _x.y, _x.z, _x.visibility, _x.presence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.local_landmarks is None:
        self.local_landmarks = None
      if self.world_landmarks is None:
        self.world_landmarks = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.local_landmarks = []
      for i in range(0, length):
        val1 = mp_pose.msg.landmark()
        _x = val1
        start = end
        end += 20
        (_x.x, _x.y, _x.z, _x.visibility, _x.presence,) = _get_struct_5f().unpack(str[start:end])
        self.local_landmarks.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.world_landmarks = []
      for i in range(0, length):
        val1 = mp_pose.msg.landmark()
        _x = val1
        start = end
        end += 20
        (_x.x, _x.y, _x.z, _x.visibility, _x.presence,) = _get_struct_5f().unpack(str[start:end])
        self.world_landmarks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.local_landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.local_landmarks:
        _x = val1
        buff.write(_get_struct_5f().pack(_x.x, _x.y, _x.z, _x.visibility, _x.presence))
      length = len(self.world_landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.world_landmarks:
        _x = val1
        buff.write(_get_struct_5f().pack(_x.x, _x.y, _x.z, _x.visibility, _x.presence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.local_landmarks is None:
        self.local_landmarks = None
      if self.world_landmarks is None:
        self.world_landmarks = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.local_landmarks = []
      for i in range(0, length):
        val1 = mp_pose.msg.landmark()
        _x = val1
        start = end
        end += 20
        (_x.x, _x.y, _x.z, _x.visibility, _x.presence,) = _get_struct_5f().unpack(str[start:end])
        self.local_landmarks.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.world_landmarks = []
      for i in range(0, length):
        val1 = mp_pose.msg.landmark()
        _x = val1
        start = end
        end += 20
        (_x.x, _x.y, _x.z, _x.visibility, _x.presence,) = _get_struct_5f().unpack(str[start:end])
        self.world_landmarks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
