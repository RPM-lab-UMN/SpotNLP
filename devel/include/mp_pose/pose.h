// Generated by gencpp from file mp_pose/pose.msg
// DO NOT EDIT!


#ifndef MP_POSE_MESSAGE_POSE_H
#define MP_POSE_MESSAGE_POSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mp_pose/landmark.h>
#include <mp_pose/landmark.h>

namespace mp_pose
{
template <class ContainerAllocator>
struct pose_
{
  typedef pose_<ContainerAllocator> Type;

  pose_()
    : local_landmarks()
    , world_landmarks()  {
    }
  pose_(const ContainerAllocator& _alloc)
    : local_landmarks(_alloc)
    , world_landmarks(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::mp_pose::landmark_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::mp_pose::landmark_<ContainerAllocator> >> _local_landmarks_type;
  _local_landmarks_type local_landmarks;

   typedef std::vector< ::mp_pose::landmark_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::mp_pose::landmark_<ContainerAllocator> >> _world_landmarks_type;
  _world_landmarks_type world_landmarks;





  typedef boost::shared_ptr< ::mp_pose::pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mp_pose::pose_<ContainerAllocator> const> ConstPtr;

}; // struct pose_

typedef ::mp_pose::pose_<std::allocator<void> > pose;

typedef boost::shared_ptr< ::mp_pose::pose > posePtr;
typedef boost::shared_ptr< ::mp_pose::pose const> poseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mp_pose::pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mp_pose::pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mp_pose::pose_<ContainerAllocator1> & lhs, const ::mp_pose::pose_<ContainerAllocator2> & rhs)
{
  return lhs.local_landmarks == rhs.local_landmarks &&
    lhs.world_landmarks == rhs.world_landmarks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mp_pose::pose_<ContainerAllocator1> & lhs, const ::mp_pose::pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mp_pose

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mp_pose::pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mp_pose::pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mp_pose::pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mp_pose::pose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mp_pose::pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mp_pose::pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mp_pose::pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42088b21d60401ab7b2e8c479a8fd9b2";
  }

  static const char* value(const ::mp_pose::pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42088b21d60401abULL;
  static const uint64_t static_value2 = 0x7b2e8c479a8fd9b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::mp_pose::pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mp_pose/pose";
  }

  static const char* value(const ::mp_pose::pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mp_pose::pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "landmark[] local_landmarks\n"
"landmark[] world_landmarks\n"
"================================================================================\n"
"MSG: mp_pose/landmark\n"
"float32 x\n"
"float32 y\n"
"float32 z \n"
"float32 visibility\n"
"float32 presence\n"
"# int32 keypoint\n"
;
  }

  static const char* value(const ::mp_pose::pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mp_pose::pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.local_landmarks);
      stream.next(m.world_landmarks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mp_pose::pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mp_pose::pose_<ContainerAllocator>& v)
  {
    s << indent << "local_landmarks[]" << std::endl;
    for (size_t i = 0; i < v.local_landmarks.size(); ++i)
    {
      s << indent << "  local_landmarks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mp_pose::landmark_<ContainerAllocator> >::stream(s, indent + "    ", v.local_landmarks[i]);
    }
    s << indent << "world_landmarks[]" << std::endl;
    for (size_t i = 0; i < v.world_landmarks.size(); ++i)
    {
      s << indent << "  world_landmarks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mp_pose::landmark_<ContainerAllocator> >::stream(s, indent + "    ", v.world_landmarks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MP_POSE_MESSAGE_POSE_H
